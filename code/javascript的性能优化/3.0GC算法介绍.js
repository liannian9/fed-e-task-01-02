//GC:
//垃圾回收机制的简写
//GC可以找到内存中的垃圾，并释放和回收空间

//GC的垃圾是什么
//程序中不在需要使用对象

//常见的GC算法

//引用计数：
    //核心思想：设置引用数，判断当前引用数是否为0，为0则回收
    //优点：发现垃圾立即回收，最大程度减少程序暂停（时刻监控内存即将爆满，立即检查）
    //缺点：无法回收循环引用的对象，资源开销大（引用计数器的操作）
const user1 = {age:11}
const user2 = {age:11}
const user3 = {age:11}
const user4 = {age:11}

const nameList = [user1.age,user2.age,user3.age,user4.age]
function fn () {
    num1 = 1;
    num2 = 2
}
fn()
//标记清除
    //实现原理：分标记与清除两个阶段
    //找到活动对象并标记（与可达对象类似）
    //遍历所有对象寻找标记对象，清除无标记对象，并抹除标记，
    //回收像相应空间
    //优点：可以解决对象循环引用的问题
    //缺点：空间碎片化，回收之后空闲空间地址不匹配，不会立即回收垃圾对象
//标记整理
    //可以看作标记清除的增强
    //标记阶段操作与标记清楚相同
    //清除之前会对对象位置进行整理，移动对象位置，让未标记对象的地址连续
    //优点：减少碎片化空间
    //缺点：不能立即回收垃圾对象
//分代回收